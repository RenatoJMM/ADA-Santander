package Lecture_3;

public class LectureAnotations {

    public static void mian(String args[]) {

        // TIPO PRIMITIVO SEMPRE PASSA O VALOR!
        // JÁ QUANOD PASSA OBJETO PASSA POR REFENCIA (REFENRENCIA ONDE ESTAALOCADO NA
        // MEMORIA)
        // IMUTABILDIADE!! Collections.unmodifiableList(), no momento de passar o objeto
        // para uma função
        // OU PODE SER CRIADO UMA LIST IMUTAVEL: List<String> nomes =
        // List.of("renato","Joao","Maria");

        // DTO E VO -> OBJETOS DE TRANSFERENCIA. NÃO SE TRANSFERE A ENTIDADE EM SI,
        // TRANSFERE ESSES TIPOS DE OBJETOS

        // --------------MODIFICADORES DE ACESSO/VISIBILIDADE--------------
        // PODE SER USADO EM CLASSES, MÉTODOS E ATRIBUTOS E CONSTRUTORES

        // ->CLASSE:
        // PUBLIC AND DEFAULT.
        // COM PUBLIC EM QUALAUQER PARTE DO PROJETO EU CONSIGO
        // UTILIZAR A CLASSE, JÁ O DEFAULT SÓ AS CLASSES NO MESMO PACOTE(PASTA) PODEM
        // UTILIZAR ESSA CLASSE.

        // -> ATRIBUTOS:
        // .PUBLIC - PROTECTED - DEFAULT - PRIVATE -> NESTA ORDEM DE PROTEÇÃO (MENOR
        // PARA MAIOR PROTEÇÃO)

        // .PUBLIC EM QUALQUER LUGAR DO CODIGO CONSIGO ACESSAR.
        // .DEFAULT -> SÓ NESSE PACOTE ACESSA O ATRIBUTO. FORA DO PACOTE NÃO TEM ACESSO
        // NA HERANÇA.
        // .PROTECTED = NA CLASSE e dentro do pacot. DENTRO E FORA DO PACOTE QUEM HERDA
        // DESSA CLASSE CONSEGUE ACESSO AOS ATRIBUTOS
        // .PRIVATE = SOMENTE ACESSO DENTRO DA CLASSE.

        // TRANSIENT(ATRIBUTO) IMPEDE QUE UMA PROPRIEDADE SEJA ENVIADA NO PACOTE DE
        // DADOS. OU PODE USAR @JsonIgnore.
        // SYNCHRONIZED(METODO) PODE ACONTECER APENAS UMA VEZ NO TEMPO. OU SEJA, NÃO
        // EXECUTA 2X AO MSM TEMPO.
        // VOLATILE(ATRIBUTO) -> SEMPRE PEGA O VALOR QUE ESTÁ NA MEMORIA, E NÃO NO CACHE
        // (QUANDO UTILIZAMOS MULTTHREAD)
        // FINAL -> CONSTANTE
        // STATIC -> ATRIBUTO DE CLASSE. NÃO PRECISA DAR NEW(INSTANCIAR) PARA UTILIZAR.

        // -------------- INNER/NESTED CLASSES --------------
        // CLASSE DENTRO DE OUTRA

        // INNER CLASS AND STATIC INNER CLASS
        // https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html

        // -------------- ENCAPSULAMENTO --------------
        // UM DOS PILARES DE POO
        // ATRIBUIR OS MODIFICADORES DE ACESSO AOS ATRIBUTOS/METODOS/CLASSE PARA
        // PROTEGER(ENCAPSULAR).
        // A PARTIR DAI EU USO OS GETTERS E SETTERS PARA ACESSAR ESTES ATRIBUTOS

    }

}
